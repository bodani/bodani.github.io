<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Monitors on Let&#39;s Go!</title>
    <link>https://zhangeamon.top/monitor/</link>
    <description>Recent content in Monitors on Let&#39;s Go!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Feb 2021 09:31:44 +0800</lastBuildDate>
    
	<atom:link href="https://zhangeamon.top/monitor/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Smapler</title>
      <link>https://zhangeamon.top/monitor/smapler/</link>
      <pubDate>Wed, 10 Feb 2021 09:31:44 +0800</pubDate>
      
      <guid>https://zhangeamon.top/monitor/smapler/</guid>
      <description>一款轻量级的一体化监控工具 https://github.com/sqshq/sample</description>
    </item>
    
    <item>
      <title>Nginx 状态监控</title>
      <link>https://zhangeamon.top/monitor/nginx-status/</link>
      <pubDate>Mon, 20 Apr 2020 11:12:28 +0800</pubDate>
      
      <guid>https://zhangeamon.top/monitor/nginx-status/</guid>
      <description>Nginx 开启status用以监控状态信息 Nginx 可以通过with-http_stub_status_module模块来监控nginx的一些状态信息。
通过nginx -V来查看是否有with-http_stub_status_module该模块。 # nginx -V nginx version: nginx/1.16.1 built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) built with OpenSSL 1.0.2k-fips 26 Jan 2017 TLS SNI support enabled configure arguments: --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-stream_ssl_preread_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-http_perl_module=dynamic --with-http_auth_request_module --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-google_perftools_module --with-debug --with-cc-opt=&#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic&#39; --with-ld-opt=&#39;-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E&#39;  修改nginx.</description>
    </item>
    
    <item>
      <title>Postgres 10 监控指标</title>
      <link>https://zhangeamon.top/monitor/postgres-indicators/</link>
      <pubDate>Fri, 27 Sep 2019 15:13:27 +0800</pubDate>
      
      <guid>https://zhangeamon.top/monitor/postgres-indicators/</guid>
      <description> 实体机  Cpu 内存 IO 网络 磁盘大小  数据库基本信息 服务启动时间 select pg_postmaster_start_time();  版本信息 select current_setting(&#39;server_version&#39;);  主从角色 select pg_is_in_recovery();  </description>
    </item>
    
    <item>
      <title>Telegraf&#43;Influxdb&#43;Grafana</title>
      <link>https://zhangeamon.top/monitor/influxdb01/</link>
      <pubDate>Tue, 26 Feb 2019 09:42:08 +0800</pubDate>
      
      <guid>https://zhangeamon.top/monitor/influxdb01/</guid>
      <description> 架构组建介绍  telegraf 数据采集 Agent for collecting and Reporting Metrics and Events. influxdb 时序数据库存储 Purpose Buid time series databases. granafa 数据展现  </description>
    </item>
    
    <item>
      <title>Postgres</title>
      <link>https://zhangeamon.top/monitor/postgres/</link>
      <pubDate>Fri, 11 Jan 2019 17:09:51 +0800</pubDate>
      
      <guid>https://zhangeamon.top/monitor/postgres/</guid>
      <description>Postgresql 常用监控 , 巡检报表 直接利用PG提供的性能统计数据
PG的很多性能数据可以通过查询pg_stat_或pg_statio_开头的系统表获取
zabbix
http://pg-monz.github.io/pg_monz/index-en.html
zabbix-extensions
PG专用的监控工具
pgsnap, pgstatspack,pgwatch,pg_statsinfo等。这些工具主要做PG的性能分析，状态查看的。不能做故障通知。
https://github.com/cybertec-postgresql/pgwatch2
https://github.com/wrouesnel/postgres_exporter
https://www.cnblogs.com/ilifeilong/p/10543876.html
基于promethues postgres_exporter
https://github.com/CrunchyData/pgmonitor</description>
    </item>
    
    <item>
      <title>Zabbix Postgres Fqa</title>
      <link>https://zhangeamon.top/monitor/zabbix-postgres-fqa/</link>
      <pubDate>Mon, 24 Dec 2018 17:18:11 +0800</pubDate>
      
      <guid>https://zhangeamon.top/monitor/zabbix-postgres-fqa/</guid>
      <description>如何使用篇  如何使用zabbix监控postgres  我们采用的是github中的开源项目zabbix-extensions中的postgres，iostat对Postgres数据库性能指标及系统IO进行监控。
以及对实体机进行监控，本文主要介绍对postgres的性能进行监控和分析
 如何在现有的数据库系统中加入监控，需要哪些条件  哪些条件
1 PostgreSQL version 9.4 and above
2 Zabbix 3.4 and newer
如何加入监控
1 在数据服务的主机中加入zabbix-agent，在cp files/postgresql/postgresql.conf /etc/zabbix/zabbix_agentd.d/，zabbix界面端加入对应模板
2 数据库访问权限，本地访问数据库权限，可在pg_hba.conf中设置， 加入一行&amp;rsquo;host all all 127.0.0.1&amp;frasl;32 trust&amp;rsquo;,这个权限有些大，根据自己的情况设置。
3 数据库中加入extends: pg_buffercache pg_stat_statements
以上所有操作不需要重启数据库， reload即可生效
 监控是如何连接到数据库的  使用模板中的宏定义
 {$PG_CONNINFO}=-h 127.0.0.1 -p 5432 -U postgres -d zabbix  如果现在一套zabbix系统中监控多个数据库，数据库的端口，用户名不统一时，可以在各自的hosts中的宏定义中分别设置各自的连接方式。
 如何指定哪些databases tables被监控  首先模板中包含3种自动发现机制分别是Discovery rule
PostgreSQL databases discovery 数据库中database
PostgreSQL database tables discovery 数据库中的table</description>
    </item>
    
    <item>
      <title>Zabbix FQA</title>
      <link>https://zhangeamon.top/monitor/zabbix-fqa/</link>
      <pubDate>Mon, 24 Dec 2018 16:53:20 +0800</pubDate>
      
      <guid>https://zhangeamon.top/monitor/zabbix-fqa/</guid>
      <description>如何使用篇  如何安装
  安装文档
架构模型为服务端、被监控端。
被监控端agent安装在需要被监控的主机上，负责收集被监控主机相关状态的信息指标如内存，cup，网络等。
服务端负责汇总所有agent的信息，如存储，处理，展现。数据存放在指定的数据库中如mysql pg。
需安装软件说明
zabbix-server-pgsql 服务端
zabbix-web-pgsql 服务端界面
zabbix-agent 被监控端，与被监控端安装在一起
 常用模块说明  Administration Users 新建属于自己的用户，禁用guest，慎用admin user 用户名 密码 media 接收信息 premissions 权限 Media type 媒体类型，用于配置发送报警媒介， Email或自定义脚本 Email 配置系统发送邮件 163为例 Name email Type Email SMTP server smtp.163.com SMTP server port 25 SMTP helo smtp.163.com SMTP email 注册的邮箱地址 Username 注册的用户名 password 密码 Configuration Hosts 管理被监控的主机 host 配置被监控的主机 Templates 监控的内容模版 Actions 触发报警时的动作，一般给管理员方法信息 Discovery 自动发现 Monitoring  FQA  Too Many Process  原因: 被监控的主机进程数过多或默认的触发条件过低 分析:</description>
    </item>
    
    <item>
      <title>常用监控介绍</title>
      <link>https://zhangeamon.top/monitor/introduce/</link>
      <pubDate>Fri, 07 Dec 2018 11:32:43 +0800</pubDate>
      
      <guid>https://zhangeamon.top/monitor/introduce/</guid>
      <description>zabbix
zabbix-extensions
promethues
osquery
m/monit</description>
    </item>
    
    <item>
      <title>Promethues Altermanager 报警</title>
      <link>https://zhangeamon.top/monitor/prometheus-altermanager/</link>
      <pubDate>Wed, 21 Nov 2018 17:29:01 +0800</pubDate>
      
      <guid>https://zhangeamon.top/monitor/prometheus-altermanager/</guid>
      <description>Prometheus Alertmanager 概述 Alertmanager与Prometheus是相互分离的两个组件。Prometheus服务器根据报警规则将警报发送给Alertmanager，然后Alertmanager将silencing、inhibition、aggregation等消息通过电子邮件、PaperDuty和HipChat发送通知。
设置警报和通知的主要步骤：
 安装配置Alertmanager
 配置Prometheus 指定altermanager服务
 在Prometheus中创建告警规则
  Alertmanager简介及机制 Alertmanager处理由Prometheus服务器等客户端发来的警报。它负责删除重复数据、分组，并将警报通过路由发送到正确的接收器，比如电子邮件、Slack等。Alertmanager还支持groups,silencing和警报抑制的机制。
分组 分组是指将同一类型的警报分类为单个通知。当许多系统同时宕机时，很有可能成百上千的警报会同时生成，这种机制特别有用。 例如，当数十或数百个服务的实例在运行，网络发生故障时，有可能一半的服务实例不能访问数据库。在prometheus告警规则中配置为每一个服务实例都发送警报的话，那么结果是数百警报被发送至Alertmanager。
但是作为用户只想看到单一的报警页面，同时仍然能够清楚的看到哪些实例受到影响，因此，可以通过配置Alertmanager将警报分组打包，并发送一个相对看起来紧凑的通知。
分组警报、警报时间，以及接收警报的receiver是在alertmanager配置文件中通过路由树配置的。
抑制(Inhibition) 抑制是指当警报发出后，停止重复发送由此警报引发其他错误的警报的机制。(比如网络不可达，导致其他服务连接相关警报)
例如，当整个集群网络不可达，此时警报被触发，可以事先配置Alertmanager忽略由该警报触发而产生的所有其他警报，这可以防止通知数百或数千与此问题不相关的其他警报。
抑制机制也是通过Alertmanager的配置文件来配置。
沉默(Silences) Silences是一种简单的特定时间不告警的机制。silences警告是通过匹配器(matchers)来配置，就像路由树一样。传入的警报会匹配RE，如果匹配，将不会为此警报发送通知。
这个可视化编辑器可以帮助构建路由树。
silences报警机制可以通过Alertmanager的Web页面进行配置。
Alermanager的配置 Alertmanager通过命令行flag和一个配置文件进行配置。命令行flag配置不变的系统参数、配置文件定义的抑制(inhibition)规则、通知路由和通知接收器。
要查看所有可用的命令行flag，运行alertmanager -h。 Alertmanager支持在运行时加载配置，如果新配置语法格式不正确，更改将不会被应用，并记录语法错误。通过向该进程发送SIGHUP或向/-/reload端点发送HTTP POST请求来触发配置热加载。
配置文件 要指定加载的配置文件，需要使用-config.file标志。该文件使用YAML来完成，通过下面的描述来定义。带括号的参数表示是可选的，对于非列表的参数的值，将被设置为指定的缺省值。
ref: https://www.jianshu.com/p/239b145e2acc</description>
    </item>
    
    <item>
      <title>Promethues 基本概念</title>
      <link>https://zhangeamon.top/monitor/prometheus-concepts/</link>
      <pubDate>Wed, 21 Nov 2018 14:08:54 +0800</pubDate>
      
      <guid>https://zhangeamon.top/monitor/prometheus-concepts/</guid>
      <description>数据模型(Data Model) 由指标名称(metric)和一个或一组标签(lable)集合以及float64类型的值组成。
例如
up{instance=&amp;quot;10.1.88.71:9115&amp;quot;,job=&amp;quot;blackbox_exporter_10.1.88.74_icmp&amp;quot;}	1  metric类型 client libraries提供了四种metric类型，包括Counter、Gauge、Histogram、Summary。
Counter 计数器，只允许增加或重置为0，不允许减少，比如服务的请求数。Counter支持用rate()函数计算平均值，比如QPS。建议使用 _total 作为后缀命名。
Gauge 非固定的值，比如CPU负载 、内存使用量。
其变化取决于server是否采集了数据，衡量的是一个事物的状态变化，比如内存使用量，内存始终是那个内存，只是其使用量会发生变化。
Histogram 采样观测值，可进行分位计算和数据聚合，计算在server端完成。
一个名为的metric，其histogram有3个固定的时间序列
&amp;lt;basename&amp;gt;_bucket 不同bucket下的观测值的累加数量 &amp;lt;basename&amp;gt;_sum 观测值的总和 &amp;lt;basename&amp;gt;_count 观测值的数量  Summary 采样观测值，与histogram不同的是，数量/总和/分位的计算在client端完成，计算结果存在server。因为没有最初的metric数据，所以summary不支持数据聚合。
一个名为的metric，其summary有3个固定的时间序列
&amp;lt;basename&amp;gt;{quantile=&amp;quot;&amp;lt;φ&amp;gt;&amp;quot;} &amp;lt;basename&amp;gt;_sum 观测值的总和 &amp;lt;basename&amp;gt;_count 观测值的数量  Job 和 Instance instance是指收集数据的目标端点，一般对应于一个进程；而job表示实现同一功能或目标的一组instance。
Prometheus采集到数据后自动为其附加job和instance标签，其中job由Prometheus配置文件定义，instance是目标数据源的地址:。
特点  多维数据模型，时间序列由metric名字和K/V标签标识 灵活的查询语言(PromQL)
 单机模式，不依赖分布式存储 基于HTTP采用pull方式收集数据 支持push数据到中间件(pushgateway) 通过服务发现或静态配置发现目标 多种图表和仪表盘  组件 Prometheus生态系统由多个组件构成，其中多是可选的，根据具体情况选择
 Prometheus server - 收集和存储时间序列数据 client library - 用于client访问server/pushgateway pushgateway - 对于短暂运行的任务，负责接收和缓存时间序列数据，同时也是一个数据源 exporter - 各种专用exporter，面向硬件、存储、数据库、HTTP服务等 alertmanager - 处理报警 其他各种支持的工具  各组件之间的通信 1, prometheus与客户端主要采取pull方式获取数据</description>
    </item>
    
  </channel>
</rss>