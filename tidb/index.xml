<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tidbs on Let&#39;s Go!</title>
    <link>https://zhangeamon.top/tidb/</link>
    <description>Recent content in Tidbs on Let&#39;s Go!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Feb 2019 14:00:58 +0800</lastBuildDate>
    
	<atom:link href="https://zhangeamon.top/tidb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>二叉树、B-Tree、B&#43;Tree、B*Tree</title>
      <link>https://zhangeamon.top/tidb/tree/</link>
      <pubDate>Mon, 18 Feb 2019 14:00:58 +0800</pubDate>
      
      <guid>https://zhangeamon.top/tidb/tree/</guid>
      <description>  二叉树：二叉树，每个结点只存储一个关键字，等于则命中，小于走左边，大于走右边；
  B-Tree：多路搜索树，每个结点存储【M/2-1，M-1]个关键字，非叶子结点存储指向关键字范围的子节点；所有关键字在整棵树中出现【且只出现一次】，非叶子结点可以命中。
  B+Tree：在B-Tree基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+Tree总是到叶子结点才命中。
  B*Tree：在B+Tree的基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3;
   </description>
    </item>
    
    <item>
      <title>LSM Overview</title>
      <link>https://zhangeamon.top/tidb/lsm/</link>
      <pubDate>Mon, 26 Nov 2018 13:40:19 +0800</pubDate>
      
      <guid>https://zhangeamon.top/tidb/lsm/</guid>
      <description>介绍 LSM-Tree，全称为 log-structured merge-tree，是为了满足日益增长的数据量所带来的高效写性能的需求而提出的设计。考虑到磁盘随机写和顺序写上千倍的性能差距，传统的Btree 结构设计采取的分散的 update-in-place 策略在数据量庞大、写缓存作用有限的情况下，存在大批量的随机写操作，使得写性能完全满足不了新数据的业务需求。为了提高写速率，LSM-Tree 采取的简单高效的日志结构的设计，将所有写操作的结果先缓存在内存并按次序分批写入硬盘，在底层管理多个版本的数据内容。理所当然地，不管是在点查还是范围查询的场景下，简单的日志结构会使得读的性能不高。因此为了提高读的性能，适当地保持系统内一定的有序性，引入排序开销是有必要的，即采取 LSM 里的 Merge 操作。此外在日志的基础上也可以添加额外的索引结构，例如 Bloomfilter 或者块索引设计。缓存友好的索引结构能够有效降低 IO 次数，快速定位到查询的数据具体的位置。
在 LSM 结构设计当中，数据按写入顺序拆分成多个批次的数据集合，包括了内存中的Memtable 和硬盘上的 SSTable。具体地，数据插入到 Memtable 当中，在 MemTable 大小超过一定阈值后进行 Flush 操作，变成不可修改的、内部有序的 SSTable。SSTable 在后台根据一定的层次结构进行组织。如下图是一个典型的多个 Level 的层次设计，Level-0 对应多个 Memtable，Level-1 对应 Flush 到硬盘上的多个相互之间无序的 SSTable，Level-2 对应一个有序的大 SSTable。
在适当的条件下后台会触发 Merge 操作，合并多个旧 SSTable 成新的 SSTable。合并的目的是为了减少文件数量，提高读的性能，此外也能够进行垃圾回收，减少多版本数据占用的空间大小。值得注意的是，后台 Merge 可能是一个特别影响前台读、写性能的操作。若系统对读要求越高，即对有序性要求越严格，往往需要更加积极的 Merge 操作，也往往会导致更剧烈的写放大，对系统整体而言累积下来的负担是更大的。
在LSM结构设计中所有的写操作都将是顺序写，换来的代价：
读放大：查询一个 Key 值所对应的 Value 值，可能需要遍历多个 SSTable 文件，对应了复数次随机 IO。
空间放大：多版本数据在合并之前会占用更多的存储空间。
写放大：在系统稳定后硬盘写数据的累积值 / 数据第一次写入硬盘的大小，该比值在LevelDB 或 RocksDB 中可达两位数。
总结来说，LSM结构设计能够提供非常好的写性能，在读方面需要结合业务特性，通过合理的层次结构设计以及索引结构控制负面影响，能够使得读性能达到业务能够接受的范畴。
目前随着固态硬盘的普及，不同于传统Btree结构在大量随机写情况下可能导致FTL层繁重的垃圾回收负载，LSM 的日志结构设计对于固态硬盘天然的友好性以及较为简单的设计模式，使其受到了很多存储引擎开发者的青睐。然而后台排序导致的写放大对于寿命有限的固态盘来说，是 LSM 中备受关注的痛点，近年来也有不少关于 LSM 在 SSD 上深度优化的相关研究。</description>
    </item>
    
    <item>
      <title>Sql 优化</title>
      <link>https://zhangeamon.top/tidb/sql-optimize01/</link>
      <pubDate>Wed, 21 Nov 2018 09:18:37 +0800</pubDate>
      
      <guid>https://zhangeamon.top/tidb/sql-optimize01/</guid>
      <description>一条sql的执行过程 将 SQL 解析成抽象语法树(AST)，将 AST 变换到内部表示(IR)。然后优化器的输入就是 IR，它将生成最优的查询计划（Plan），然后会变成具体的执行器（Executor），里面有许多的算。
优化的阶段为IR 到生成 Plan 的过程，包括逻辑优化和物理优化
逻辑优化 逻辑优化主要是基于规则的优化(RBO)。
逻辑算子  DataSource 这个就是数据源，也就是表。 select * from t 里面的 t Selection 选择，就是 select xxx from t where xx = 5 里面的 where 过滤条件条件 Projection 投影，也就是 select c from t 里面的列 c Join 连接， select xx from t1, t2 where t1.c = t2.c 就是把 t1 t2 两个表做 join，这个连接条件一个简单的等值连接。join 有好多种，内关联，左关联，右关联，全关联..  列裁剪 只读取需要的列
最大最小消除 select min(id) from t
换成</description>
    </item>
    
    <item>
      <title> ERROR 2013 (HY000): Lost connection to MySQL server during query </title>
      <link>https://zhangeamon.top/tidb/2013/</link>
      <pubDate>Wed, 14 Nov 2018 10:08:02 +0800</pubDate>
      
      <guid>https://zhangeamon.top/tidb/2013/</guid>
      <description>ERROR 2013 (HY000) Lost connection to MySQL server during query 错误出现场景 select count(id) from account_user where id&amp;gt; 0; +----------+ | count(id) | +----------+ | 2940245 | +----------+ 1 row in set (0.78 sec) delete from account_user where id&amp;gt; 0; ERROR 2013 (HY000): Lost connection to MySQL server during query tidb.log
2018/11/14 10:57:12.476 server.go:303: [info] con:261 new connection 10.1.88.32:54462 2018/11/14 10:57:15.387 coprocessor.go:689: [info] [TIME_COP_PROCESS] resp_time:792.561353ms txn_start_ts:404269101106331649 region_id:77367 store_addr:10.1.88.84:20160 kv_process_ms:537 2018/11/14 10:57:17.227 pd.</description>
    </item>
    
    <item>
      <title>两地三机房方案落地</title>
      <link>https://zhangeamon.top/tidb/%E4%B8%A4%E5%9C%B0%E4%B8%89%E6%9C%BA%E6%88%BF%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0/</link>
      <pubDate>Wed, 17 Oct 2018 17:19:09 +0800</pubDate>
      
      <guid>https://zhangeamon.top/tidb/%E4%B8%A4%E5%9C%B0%E4%B8%89%E6%9C%BA%E6%88%BF%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>